snippet snips "all snippets"
/*
temp
for
fore
endsnippet


snippet temp "my minimalistic template"
#include<bits/stdc++.h>

using namespace std;
using ull = unsigned long long;
using ll  = long long;
#define pb push_back
#define fi first
#define se second
#define vi vector<int> 
#define vl vector<ll> 
#define vvi vector<vi> 
#define vvl vector<vl> 
#define pii pair<int,int>
#define vii vector<pii> 
#define all(x) begin(x), end(x)

void solve(){
    $0
}

int32_t main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    int t = 1;
    // cin >> t;

    while(t--) solve();

    return 0;
}
endsnippet

snippet for "typical for"
for (int ${1:i} = 0; $1 < ${2:n}; $1++) {
    $0
}
endsnippet

snippet dsu "dsu realisation using ranks"
const int maxn = 2e5 + 1;

int p[maxn];
int r[maxn];

void build_dsu(int n){
    for (int i = 1; i <= n; i++){
        p[i] = i;
    }
}
int get(int a){
    return p[a] = (a == p[a] ? a : get(p[a]));
}

void unite(int a, int b){
    a = get(a);
    b = get(b);
    if(a == b)
	return;
    if(r[a] == r[b]){
        r[a]++;
    }
    if(r[a] > r[b]){
        p[b] = a;
    }
    else{
        p[a] = b;
    }
}
endsnippet

snippet fore "acts like foreach in C#"
for (${1:int} el : ${2:arr}) {
    $0
}
endsnippet
